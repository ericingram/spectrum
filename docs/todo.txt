

throwException -> thrownException?

RunResultsBuffer: rename $result['result'] to $result['value']
RunResultsBuffer: rename RunResultsBuffer to RunResultBuffer or ResultBuffer (буффер может использоваться не только для хранения результатов запуска)?

MatcherCall::getIsNot, Assert::isNot rename to getNot ???
Assert::$isNotEnabled rename to notStatus???

Spec->callPlugin rename to getPlugin?

---Плагин report
	selector->isRoot()

	добавить ссылку "выполнить только этот тест" — в текущем контексте, во всех контекстах
	серый цвет для spaces сделать темнее, найти более подходящие символы
	цвет для wait сделать #aaa
	empty title — "empty or has empty", "all or one of children was empty"
	flush

	написать тесты только для правильности вывода результата - fail и т.п.
	testShouldBeGenerateValidXhtml

	исправить TODO

---рефакторинг core
	SpecContainerDescribe -> remove
	SpecContainerContext -> SpecContainer
	SpecContainerPattern -> SpecContainer
	SpecContainerArgumentsProvider -> SpecContainer
	SpecItemIt -> SpecItemManual

	Spec->setDetails()
		Details->createdConstructionCommand
	// формироваться должно по правилам формирования идентификаторов
	Spec->setAlias();
	Spec->setSystemName();
	Spec->setSystemAlias();
	Spec->setCreatsConstructionCommand();



убрать излишние DOC копирайты
net\mkharitonov удалить
В копирайт в шапке добавить ссылку на лицензию на сайте
email заменить


---Плагин report
	report->highlightSpecNameWithSameFileName
	время выполнения каждого теста и группы тестов
	кол-во выполненных тестов
	упростить и улучшить expand/collapse в TotalInfo (возможно, сделав его в виде ползунка с тремя пунктами)
	feature: report->setWriteToFile()


runner.php?file=qwe.php&uid=1_1_1

Doc: Расширение и конфигурация
Дописать и перезалить документацию по setSettings
результат выполнения: написать про результат выполнения запуска контекстов и откдюченных спеков

Структура отлова исключения
после выброса исключения дальнейшее исполбзование объекта не предполагается

SpecItemIt (команда конструирования it()) ловит следующие исключения и php ошибки:
Execution - отлов исключений, выброшенных в любом из нижеперечисленных мест
	WorldBuilding
		onTestCallbackCallBefore
			TestCallback
		onTestCallbackCallAfter
	WorldDestroying

Assert->CallMatcher (в любом из мест Execution)
Притом, отлов исключений, выброшенных матчерами происходит непосредственно в функции вызова матчера класса Assert (что позволяет продолжатб выполнение теста после исключения матчера)

Переписать примеры в документации на AddressBook

--- Написать PHPDOC комментарии
--- Доработать тесты
	constrctionCommands\IncludeTest — может разместить в тестах соответствующих спеков?
	ErrorHandlingTest

--- assert, счетчик вызовов
Command::expectCount();
incrementCount()
count(getRunningInstance()->getResultStack())


--- argumentsProviders
	провайдеры аргументов — возможность использования combine?

---worldCreators
Добавить дополнительных творцов: beforeAll(), afterAll() и т.п.
beforeAll - выполняется перед всеми в nearestDescribe всех его контекстов
beforeOnce
ifFirstChild()
beforeAll() vs beforeGroup()

---extensions
Spec->loadExtension()
LoadExtensionPatterns
loadExtensionWorld
spec->addExtensionPath
spec->addExtensionDir

--- mock
Spy
FileSystemMockReal
FileSystemMockVirtual

--- events
	Добавить события onMatcherCall в callMatcher()
		$it->dispatchEvent('onMatcherCallBefore', $onMatcherCallEvent);
		$it->dispatchEvent('onMatcherCallAfter', $onMatcherCallEvent); — вызывать в конце и в случае выброса исключения
		сделать метод Spec->dispatchEvent() публичным
		добавить проверку на Config::allowAlienEventDispatching() в Spec->dispatchEvent()
		OnMatcherCallEvent
			Assert $owner
			$matcherName
			$expectedArgs
			MatcherCallDetails $matcherCallDetails
			Spec $specItem
			$matcherReturnValue
			$result
			$exception
			$isBreak

--- world
	Вопрос: Что лучше: constructionCommands\Manager::world() или параметр $world в тестовой функции
	Ответ:
		Лучше $world, т.к.:
		- обеспечивает защиту мира (ф-я world() может быть вызвана из глубин тестируемого кода)
		- будет стимулировать не использовать мир в матчерах
		- в examples мир по любому не может быть вызван


--- output:
	Вопрос: if ($spec->getName() == $name) — перекодировать надо или лучше хранить данные внутри обьектов в UTF-8?
	Ответ:
		Нет, т.к. тогда надо будет перекодировать данные в:
			Spec->setName(),
			SpecContainerPattern->setArguments(),
			SpecContainerPattern->getArguments() — при передаче callback функции в itLikePattern()
			SpecItemIt->setAdditionalArguments(),
			SpecItemIt->getAdditionalArguments() — при передаче testCallback функции
		Плюс плагины будут видеть данные world в исходной кодировке, т.к. полностью (включая данные их возможных в нем
		методов) перекодировать его будет проблематично.

		И если внутри кода тестов, написанного в одной кодировке будет вызван один из этих методов, то ему придется
		знать о том, что созданные им данные хранятся в обьектной структуре в другой кодировке и перекодировать.

		Вывод: оставляем хранение данных в обьектной структуре в исходной кодировке, отдавая таким образом предпочтение
		более прозрачной работе с кодировками из тестов, нежели из дополнительных обработчиков вне кода тестов (плагинов,
		кода обработки в runner'е и т.п.)

//spectrum_DefaultMatchers_Base_beInstanceOf
beTriggerError(level)/bePhpError

//spectrum_DefaultMatchers_Base_BeTypeBool
//spectrum_DefaultMatchers_Base_BeTypeInt
//spectrum_DefaultMatchers_Base_BeTypeFloat
//spectrum_DefaultMatchers_Base_BeTypeNumber
//spectrum_DefaultMatchers_Base_BeTypeString
//spectrum_DefaultMatchers_Base_BeTypeScalar
//spectrum_DefaultMatchers_Base_BeTypeArray
//spectrum_DefaultMatchers_Base_BeTypeObject
//spectrum_DefaultMatchers_Base_BeTypeCallback
//spectrum_DefaultMatchers_Base_BeTypeClosure
//spectrum_DefaultMatchers_Base_BeTypeResource
/*
* spectrum_DefaultMatchers_File_BeFileExists
* spectrum_DefaultMatchers_File_BeFileContentEqual
* spectrum_DefaultMatchers_File_BeFileIsDir
* spectrum_DefaultMatchers_File_BeFileIsFile
* spectrum_DefaultMatchers_File_BeFileIsLink
* spectrum_DefaultMatchers_File_BeFileIsExecutable
* spectrum_DefaultMatchers_File_BeFileIsReadable
* spectrum_DefaultMatchers_File_BeFileIsUploaded
* spectrum_DefaultMatchers_File_BeFileIsWritable
 *
 *
 *
* spectrum_DefaultMatchers_Array_BeArrayHasKey
* spectrum_DefaultMatchers_Array_BeArrayHasValue
* spectrum_DefaultMatchers_Array_BeArrayHasAllKeys
* spectrum_DefaultMatchers_Array_BeArrayHasAllValues
* spectrum_DefaultMatchers_Array_BeArrayHasAnyKey
* spectrum_DefaultMatchers_Array_BeArrayHasAnyValue
* spectrum_DefaultMatchers_Array_BeArrayUnsortedEqual
* spectrum_DefaultMatchers_Array_BeArrayUnsortedEqualRecursive
* spectrum_DefaultMatchers_Array_BeArrayUnsortedIdentical
* spectrum_DefaultMatchers_Array_BeArrayUnsortedIdenticalRecursive
* spectrum_DefaultMatchers_Array_BeArrayCountEqual
 *
*
* spectrum_DefaultMatchers_String_BeStringContain
* spectrum_DefaultMatchers_String_BeStringContainInPosition
* spectrum_DefaultMatchers_String_BeStringStartWith
* spectrum_DefaultMatchers_String_BeStringEndWith
* spectrum_DefaultMatchers_File_BeStringEndWithAnySlash
* spectrum_DefaultMatchers_File_BeStringStartWithAnySlash
*
* spectrum_DefaultMatchers_RegExp_BePregMatch
 *
 * spectrum_DefaultMatchers_Xml_BeXmlWellFormed
 * spectrum_DefaultMatchers_Xml_BeXmlValid
 *
 * spectrum_DefaultMatchers_Html_BeHtmlAttributeEqual
 * spectrum_DefaultMatchers_Html_BeHtmlContainTag
 * spectrum_DefaultMatchers_Html_BeHtmlCorrect
 * spectrum_DefaultMatchers_Html_BeHtmlWellFormed
 * spectrum_DefaultMatchers_Html_BeHtmlValid
 *
 *














describe(function(){
	context('context 2', function(){
	  -> describe(function(){
		 -> context('context 2', function(){
				it('test 2');
			 -> context('context 1', function(){
					it('test 2');
				});
			});

			context('context 1', function(){});

			it('test 2');
		}

		it('test 2');
	});
});

  -> describe(function(){
		context('context 1', function(){});
	 -> context('context 2', function(){
		 -> context('context 1', function(){});
		});

	  -> describe(function(){
		 -> context('context 2', function(){
				it('test 2');
			 -> context('context 1', function(){
					it('test 2');
				});

			 context('context 1', function(){
					it('test 2');
				});
			});

			context('context 1', function(){});

			it('test 2', function($w){
				world()->foo = bar
				getRunningInstance()::getWorld()
			});
		}
	})




describe(function(){
	context('context 1', function(){});
	context('context 2', function(){});

	describe(function(){
		context('context 2', function(){
			it('test 1');
		 -> context('context 4', function(){});
			context('context 3', function(){});
		});

		context('context 1', function(){});

		it('test 2');
	}
})


describe(function(){
	beforeEach(1);
	beforeEach(2);

	afterEach(33);
	afterEach(44);
	
	describe(function(){
		beforeEach(3);
		beforeEach(4);
		it()
		afterEach(11);
		afterEach(22);

		context('context 0', function(){
			context('context 1', function(){
				beforeEach();
			});

			context('context 2', function(){
				beforeEach();

				it('test 1');

			});
		});

		context('context 3', function(){
			beforeEach();
		});

		it('test 1');
		it('test 2');
		it('test 3');
	})

	it('test 1');
	it('test 2');
	it('test 3');
})


describe(function(){
	beforeEach();

	context('context 2', function(){
		beforeEach();

		context('context 1', function(){
			beforeEach();
		});

        it('test 1');

	});

	describe('test 1');
	it('test 2');
	it('test 3');
})


describe(function(){
	describe('context 1', function(){
		beforeEach();

		it('test 1');
		it('test 2');
		it('test 3');
	});

	describe('context 2', function(){
		beforeEach();

		it('test 1');
		it('test 2');
		it('test 3'); // Ohh... one more copy/paste
	});
})





describe(function(){

	context('', function(){
		beforeEach();
	});

	context('context 2', function(){
		beforeEach();
	});

	it('test 1');
	it('test 2');
	it('test 3');
})


describe(function(){
	describe('context group', function(){
		beforeEach();

		it('test 1');
		it('test 2');
		it('test 3');

		describe('context 1', function(){
			beforeEach();

			it('test 1');
			it('test 2');
			it('test 3');
		});

		describe('context 2', function(){
			beforeEach();

			it('test 1');
			it('test 2');
			it('test 3');
		});
	});
})